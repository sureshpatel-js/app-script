//==================CONSTANTS=====================
const PRIVATE_KEY = "your_private_key";
const USER_TABLE_ID = "google_sheet_it"; //google sheet id
const COURSES_TABLE_ID = "google_sheet_it"; //google sheet id
//USER_TABLE_COLUMN
var USER_TABLE_NAME_COLUMN = 0;
var USER_TABLE_EMAIL_COLUMN = 1;
var USER_TABLE_PASSWORD_COLUMN = 2;
var USER_TABLE_OTP_COLUMN = 3;
var USER_TABLE_ENROLLED_COURCES_COLUMN = 4;
var USER_TABLE_USER_TYPE_COLUMN = 5;
var USER_TABLE_EMAIL_VERIFIED_COLUMN = 6;
//COURSES_TABLE_COLUMN
var COURSES_TABLE_ID_COLUMN = 0;
var COURSES_TABLE_NAME_COLUMN = 1;
var COURSES_TABLE_DESCRIPTION_COLUMN = 2;
var COURSES_TABLE_LEVEL_COLUMN = 3;
var COURSES_TABLE_VIDEO_URL_COLUMN = 4;
var COURSES_TABLE_IMAGE_URL_COLUMN = 5;
var COURSES_TABLE_COURSE_CONTENT_COLUMN = 6;
var COURSES_TABLE_WHAT_YOU_WILL_LEARN_COLUMN = 7;
var COURSES_TABLE_COURSE_TYPE_COLUMN = 8;
var COURSES_TABLE_COUNSELLED_NUMBER_COLUMN = 9;
var COURSES_TABLE_PRICE_COLUMN = 10;
var COURSES_TABLE_PAY_US_AT_COLUMN = 11;
//================SUCCESS_AND_ERROR_RES===============
function appErrorRes(error) {
  return ContentService.createTextOutput(JSON.stringify({ status: "error", data: { message: error } })).setMimeType(ContentService.MimeType.JSON);
}
function appSuccessRes(success) {
  return ContentService.createTextOutput(JSON.stringify({ status: "success", data: { message: success } })).setMimeType(ContentService.MimeType.JSON);
}
//==============TOKEN===============
const createJwt = ({ privateKey, expiresInHours, data = {} }) => {
  // Sign token using HMAC with SHA-256 algorithm
  const header = {
    alg: 'HS256',
    typ: 'JWT',
  };
  const now = Date.now();
  const expires = new Date(now);
  expires.setHours(expires.getHours() + expiresInHours);

  // iat = issued time, exp = expiration time
  const payload = {
    exp: Math.round(expires.getTime() / 1000),
    iat: Math.round(now / 1000),
  };

  // add user payload
  Object.keys(data).forEach(function (key) {
    payload[key] = data[key];
  });

  const base64Encode = (text, json = true) => {
    const data = json ? JSON.stringify(text) : text;
    return Utilities.base64EncodeWebSafe(data).replace(/=+$/, '');
  };

  const toSign = `${base64Encode(header)}.${base64Encode(payload)}`;
  const signatureBytes = Utilities.computeHmacSha256Signature(toSign, privateKey);
  const signature = base64Encode(signatureBytes, false);
  return `${toSign}.${signature}`;
};

const verifyJwt = (jsonWebToken, privateKey) => {
  const [header, payload, signature] = jsonWebToken.split('.');
  const signatureBytes = Utilities.computeHmacSha256Signature(`${header}.${payload}`, privateKey);
  const validSignature = Utilities.base64EncodeWebSafe(signatureBytes);
  if (signature === validSignature.replace(/=+$/, '')) {
    const blob = Utilities.newBlob(Utilities.base64Decode(payload)).getDataAsString();
    const { exp, ...data } = JSON.parse(blob);
    if (new Date(exp * 1000) < new Date()) {
      return { status: false, message: "Token expired, please login again.", data: null };
    }
    return { status: true, message: "Token Verified.", data: data };
  } else {
    return { status: false, message: "Invalid Signature.", data: null };
  }
};
//===================================================USER_AND_AUTH====================================================

function protectRoute(req) {
  const { token } = req.parameter;
  //Validation
  if (!token) {
    return { status: false, message: "You are not logged in please login.", data: null };
  }
  const tokenObj = verifyJwt(token, PRIVATE_KEY);
  if (tokenObj.status) {
    const { email } = tokenObj.data;
    const ss = SpreadsheetApp.openById(USER_TABLE_ID);
    const sheet = ss.getSheets()[0];
    const rows = sheet.getDataRange().getValues();

    var userExist = false;
    const user = {}
    for (var row = 1; row < rows.length; row++) {
      var dbEmail = rows[row][USER_TABLE_EMAIL_COLUMN];
      if (dbEmail === email) {
        userExist = true;
        user["name"] = rows[row][USER_TABLE_NAME_COLUMN];
        user["email"] = rows[row][USER_TABLE_EMAIL_COLUMN];
        user["password"] = rows[row][USER_TABLE_PASSWORD_COLUMN];
        user["otp"] = rows[row][USER_TABLE_OTP_COLUMN];
        user["enrolled_courses"] = rows[row][USER_TABLE_ENROLLED_COURCES_COLUMN] ? JSON.parse(rows[row][USER_TABLE_ENROLLED_COURCES_COLUMN]) : [];
        user["user_type"] = rows[row][USER_TABLE_USER_TYPE_COLUMN];
        break;
      }
    }

    if (!userExist) {
      return { status: false, message: "User not found for this token." }
    }
    return { status: true, message: tokenObj.message, data: tokenObj.data, user }
  } else {
    return tokenObj;
  }

}

//===============SIGNUP================




function signup(req) {
  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { name, email } = reqBody;
  if (!name) return appErrorRes("Please provide your name.");
  if (!email) return appErrorRes("Please provide your email.");

  const ss = SpreadsheetApp.openById(USER_TABLE_ID);
  const sheet = ss.getSheets()[0];


  const rows = sheet.getDataRange().getValues();
  var userExist = false;
  var emailVarified = false;

  const rn = Math.random() * 10000;
  const otp = Math.floor(rn).toFixed(0);

  rows.forEach(row => {
    var dbEmail = row[USER_TABLE_EMAIL_COLUMN];
    var dbEmailVerified = row[USER_TABLE_EMAIL_VERIFIED_COLUMN];
    if (dbEmail === email) {
      userExist = true;
      if (dbEmailVerified) {
        emailVarified = true;
      } else {
        row[USER_TABLE_OTP_COLUMN] = otp;
      }
    }
  });


  if (userExist && emailVarified) {
    return appErrorRes("You already have an account with us, please login.");
  } else if (!userExist && !emailVarified) {
    const data = sheet.appendRow([name, email, null, otp]);
    MailApp.sendEmail({
      to: email,
      subject: "Please verify your otp.",
      htmlBody: `<h1>${otp}</h1>`
    });
    return appSuccessRes("Otp has been sent to your email please verify.");
  } else if (userExist && !emailVarified) {
    sheet.getDataRange().setValues(rows);
    MailApp.sendEmail({
      to: email,
      subject: "Please verify your otp.",
      htmlBody: `<h1>${otp}</h1>`
    });
    return appSuccessRes("Otp has been sent to your email please verify.");
  }
}

//==============OTP_VERIFY============

function otpVerify(req) {
  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { otp, email, password } = reqBody;
  if (!otp) return appErrorRes("Please provide your otp.");
  if (!email) return appErrorRes("Please provide your email.");
  if (!password) return appErrorRes("Please provide your password.");
  const ss = SpreadsheetApp.openById(USER_TABLE_ID);
  const sheet = ss.getSheets()[0];

  var rows = sheet.getDataRange().getValues();
  var emailVarified = false;
  var otpVerified = false;
  rows.forEach(row => {
    var dbEmail = row[USER_TABLE_EMAIL_COLUMN];
    var dbOtp = row[USER_TABLE_OTP_COLUMN];
    if (dbEmail === email) {
      emailVarified = true;
      if (dbOtp.toString() === otp.toString()) {
        otpVerified = true;
        row[USER_TABLE_OTP_COLUMN] = null;
        row[USER_TABLE_PASSWORD_COLUMN] = password;
        row[USER_TABLE_EMAIL_VERIFIED_COLUMN] = true;
      }
    }
  });
  if (!emailVarified) return appErrorRes("Invalid email.");
  if (!otpVerified) return appErrorRes("Invalid Otp.");

  sheet.getDataRange().setValues(rows);
  return appSuccessRes("Password updated successfully.");
}
//==============LOGIN============
function login(req) {
  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { email, password } = reqBody;
  if (!email) return appErrorRes("Please provide your email.");
  if (!password) return appErrorRes("Please provide your password.");
  const ss = SpreadsheetApp.openById(USER_TABLE_ID);
  const sheet = ss.getSheets()[0];

  var resUserObj = {};
  var rows = sheet.getDataRange().getValues();
  var emailVarified = false;
  var passwordVerified = false;
  rows.forEach(row => {
    var dbEmail = row[USER_TABLE_EMAIL_COLUMN];
    var dbPassword = row[USER_TABLE_PASSWORD_COLUMN];
    if (dbEmail === email) {
      emailVarified = true;
      if ( dbPassword.toString() === password.toString()) {
        passwordVerified = true;
        resUserObj["name"] = row[USER_TABLE_NAME_COLUMN];
        resUserObj["email"] = row[USER_TABLE_EMAIL_COLUMN];
        resUserObj["enrolled_courses"] = row[USER_TABLE_ENROLLED_COURCES_COLUMN] ? JSON.parse(row[USER_TABLE_ENROLLED_COURCES_COLUMN]) : [];
      }
    }
  });
  if (!emailVarified) return appErrorRes("Invalid email.");
  if (!passwordVerified) return appErrorRes("Invalid password.");

  var token = createJwt({
    privateKey: PRIVATE_KEY,
    expiresInHours: 6,
    data: {
      email: resUserObj.email
    }
  });
  return ContentService.createTextOutput(JSON.stringify({
    status: "success",
    data: {
      message: "You are logged in successfully.",
      token,
      user: resUserObj
    }
  })).setMimeType(ContentService.MimeType.JSON);
}

//================generateOtp===========

function generateOtp(req) {
  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { email } = reqBody;
  if (!email) return appErrorRes("Please provide your email.");
  const ss = SpreadsheetApp.openById(USER_TABLE_ID);
  const sheet = ss.getSheets()[0];
  var rows = sheet.getDataRange().getValues();

  var emailVarified = false;
  const rn = Math.random() * 10000;
  const otp = Math.floor(rn).toFixed(0);

  rows.forEach(row => {
    var dbEmail = row[USER_TABLE_EMAIL_COLUMN];
    if (dbEmail === email) {
      emailVarified = true;
      row[USER_TABLE_OTP_COLUMN] = otp;
    }
  });
  if (!emailVarified) return appErrorRes("Invalid email.");
  MailApp.sendEmail({
    to: email,
    subject: "Please verify your otp.",
    htmlBody: `<h1>${otp}</h1>`
  });
  sheet.getDataRange().setValues(rows);
  return appSuccessRes("Otp has been sent to your email please verify.");
}


//===================================================COURSES=======================================================
//====================getCoursesDetailById=====================
function getCoursesDetailById(req) {
  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { course_id } = reqBody;
  if (!course_id) return appErrorRes("Please provide course id.");

  const ss = SpreadsheetApp.openById(COURSES_TABLE_ID);
  const sheet = ss.getSheets()[0];
  const rows = sheet.getDataRange().getValues();

  const courses_array = [];
  for (var row = 1; row < rows.length; row++) {
    var dbId = rows[row][COURSES_TABLE_ID_COLUMN];
    if (dbId === parseInt(course_id)) {
      const id = dbId
      const name = rows[row][COURSES_TABLE_NAME_COLUMN];
      // const description = rows[row][COURSES_TABLE_DESCRIPTION_COLUMN];
      // const level = rows[row][COURSES_TABLE_LEVEL_COLUMN];
      // const video_url = rows[row][COURSES_TABLE_VIDEO_URL_COLUMN];
      //const image_url = rows[row][COURSES_TABLE_IMAGE_URL_COLUMN];
      const course_content = rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN] ? JSON.parse(rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN]) : [];
      const what_you_will_learn = rows[row][COURSES_TABLE_WHAT_YOU_WILL_LEARN_COLUMN] ? JSON.parse(rows[row][COURSES_TABLE_WHAT_YOU_WILL_LEARN_COLUMN]) : [];
      const course_type = rows[row][COURSES_TABLE_COURSE_TYPE_COLUMN];
      const counselled_number = rows[row][COURSES_TABLE_COUNSELLED_NUMBER_COLUMN];
      const price = rows[row][COURSES_TABLE_PRICE_COLUMN];
      const pay_us_at = rows[row][COURSES_TABLE_PAY_US_AT_COLUMN];
      courses_array.push({
        id, name, course_content, what_you_will_learn, course_type, counselled_number, price, pay_us_at
      });
    }
  }

  return ContentService.createTextOutput(JSON.stringify({ status: "success", data: { courses_array } })).setMimeType(ContentService.MimeType.JSON);
}
//====================getMyCourses=====================
function getMyCourses(req) {
  const protectRouteRes = protectRoute(req);
  if (!protectRouteRes.status) {
    return appErrorRes(protectRouteRes.message);
  }

  const { user } = protectRouteRes;
  const { enrolled_courses } = user;
  if (enrolled_courses.length === 0) {
    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      message: "Your are not enrolled any of our courses.",
      data: { courses_array: [] }
    })).setMimeType(ContentService.MimeType.JSON);
  }

  const ss = SpreadsheetApp.openById(COURSES_TABLE_ID);
  const sheet = ss.getSheets()[0];
  const rows = sheet.getDataRange().getValues();

  const courses_array = [];

  for (var i = 0; i < enrolled_courses.length; i++) {
    for (var row = 1; row < rows.length; row++) {
      var dbId = rows[row][COURSES_TABLE_ID_COLUMN];
      if (dbId === enrolled_courses[i].id) {
        const id = dbId
        const name = rows[row][COURSES_TABLE_NAME_COLUMN];
        const description = rows[row][COURSES_TABLE_DESCRIPTION_COLUMN];
        const level = rows[row][COURSES_TABLE_LEVEL_COLUMN];
        const video_url = rows[row][COURSES_TABLE_VIDEO_URL_COLUMN];
        const image_url = rows[row][COURSES_TABLE_IMAGE_URL_COLUMN];
        const enrolled_date = enrolled_courses[i].enrolled_date;
        const start_date = enrolled_courses[i].start_date;
        const connect = enrolled_courses[i].connect;
        // const course_content = rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN] ? JSON.parse(rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN]) : [];
        courses_array.push({
          id, name, description, level, video_url, image_url, enrolled_date, start_date,connect
        });
      }
    }
  }
  return ContentService.createTextOutput(JSON.stringify({ status: "success", data: { courses_array } })).setMimeType(ContentService.MimeType.JSON);
}

//====================getAllCourses=====================
function getAllCourses(req) {
  const ss = SpreadsheetApp.openById(COURSES_TABLE_ID);
  const sheet = ss.getSheets()[0];
  const rows = sheet.getDataRange().getValues();

  const courses_array = [];


  for (var row = 1; row < rows.length; row++) {
    const id = rows[row][COURSES_TABLE_ID_COLUMN];
    const name = rows[row][COURSES_TABLE_NAME_COLUMN];
    const description = rows[row][COURSES_TABLE_DESCRIPTION_COLUMN];
    const level = rows[row][COURSES_TABLE_LEVEL_COLUMN];
    const video_url = rows[row][COURSES_TABLE_VIDEO_URL_COLUMN];
    const image_url = rows[row][COURSES_TABLE_IMAGE_URL_COLUMN];
    // const course_content = rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN] ? JSON.parse(rows[row][COURSES_TABLE_COURSE_CONTENT_COLUMN]) : [];
    courses_array.push({
      id, name, description, level, video_url, image_url
    });
  }

  return ContentService.createTextOutput(JSON.stringify({ status: "success", data: { courses_array } })).setMimeType(ContentService.MimeType.JSON);
}
//===================================================ADMIN=======================================================
function addNewCourse(req) {
  const protectRouteRes = protectRoute(req);
  if (!protectRouteRes.status) {
    return appErrorRes(protectRouteRes.message);
  }
  const { user } = protectRouteRes;
  return ContentService.createTextOutput(JSON.stringify({ status: "success", data: { user } })).setMimeType(ContentService.MimeType.JSON);
}

function addCourseToUser(req) {
  const protectRouteRes = protectRoute(req);
  if (!protectRouteRes.status) {
    return appErrorRes(protectRouteRes.message);
  }
  const { user } = protectRouteRes;
  if (user.user_type !== "app_admin") {
    return appErrorRes("You are not authorised to perform this action.");
  }

  //Validation
  if (!req.postData) {
    return appErrorRes("Please provide Data.")
  }
  const reqBody = JSON.parse(req.postData.contents);
  const { course_id, user_email } = reqBody;
  if (!course_id) return appErrorRes("Please provide course id.");
  if (!user_email) return appErrorRes("Please provide user email.");
  const ss = SpreadsheetApp.openById(USER_TABLE_ID);
  const sheet = ss.getSheets()[0];

  var rows = sheet.getDataRange().getValues();
  var emailFound = false;
  var alreadyEnrolled = false;
  rows.forEach(row => {
    var dbEmail = row[USER_TABLE_EMAIL_COLUMN];
    if (dbEmail === user_email) {
      emailFound = true;
      var enrolled_courses = row[USER_TABLE_ENROLLED_COURCES_COLUMN] ? JSON.parse(row[USER_TABLE_ENROLLED_COURCES_COLUMN]) : [];
      if (enrolled_courses.length === 0) {
        var date = new Date().getTime();
        enrolled_courses.push({
          id: course_id,
          enrolled_date: date
        });
        row[USER_TABLE_ENROLLED_COURCES_COLUMN] = JSON.stringify(enrolled_courses);
      } else {
        const [found] = enrolled_courses.filter(el => el.id == course_id)
        if (found) {
          alreadyEnrolled = true;
          return
        } else {
          var date = new Date().getTime();
          enrolled_courses.push({
            id: course_id,
            enrolled_date: date
          });
          row[USER_TABLE_ENROLLED_COURCES_COLUMN] = JSON.stringify(enrolled_courses);
        }
      }
    }
  });
  if (!emailFound) return appErrorRes("Email not found, please check entered email address.");
  if (alreadyEnrolled) return appErrorRes("User already enrolled in this course.");
  sheet.getDataRange().setValues(rows);
  return appSuccessRes(`${user_email} user successfully enrolled in course with this ${course_id} id.`);
}




//==============MAIN_APP==============
function doPost(req) {
  const { path } = req.parameter;

  if (path === "signup") {
    return signup(req);
  } else if (path === "otpVerify") {
    return otpVerify(req);
  } else if (path === "login") {
    return login(req);
  } else if (path === "generateOtp") {
    return generateOtp(req);
  } else if (path === "getMyCourses") {
    return getMyCourses(req);
  } else if (path === "getAllCourses") {
    return getAllCourses(req);
  } else if (path === "getCoursesDetailById") {
    return getCoursesDetailById(req);
  } else if (path === "admin_addNewCourse") {
    return addNewCourse(req);
  } else if (path === "admin_addCourseToUser") {
    return addCourseToUser(req);
  } else {
    return ContentService.createTextOutput("Please provide path in query");
  }
}
















